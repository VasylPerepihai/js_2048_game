{"version":3,"sources":["scripts/main.js"],"names":["field","document","querySelector","tBodies","scoreField","buttonStart","screenControl","Game","numberForRandom","Math","floor","random","findEmptyCells","randomCellIndex","emptyCells","length","row","index","valuesArray","randomWithProbability","forEach","item","array","item2","index2","array2","emptyCell","push","filledCells","filledCell","gameField","rows","cells","innerText","className","classList","add","times","i","map","val","reverse","findFilledCells","fCell","availableCellCoords","find","eCell","mergeDuplicatedCells","insertRandomNumber","cell","score","showWinMessage","j","undefined","onclick","window","innerWidth","style","display","remove","renderGameField","clickHandler","buttonName","moveUp","rotateRight90deg","checkAvailableMoves","addEventListener","e","includes","code","preventDefault","target","name"],"mappings":"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","file":"main.44e39674.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\n\nconst field = document.querySelector('.game-field').tBodies[0];\nconst scoreField = document.querySelector('.controls .game-score');\nconst buttonStart = document.querySelector('button.start');\nconst screenControl = document.querySelector('.screen-control-container');\n\nclass Game {\n  static randomWithProbability() {\n    const numberForRandom = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n    const index = Math.floor(Math.random() * 10);\n\n    return numberForRandom[index];\n  }\n\n  static insertRandomNumber() {\n    this.findEmptyCells();\n\n    const randomCellIndex = Math.floor(Math.random() * this.emptyCells.length);\n\n    if (this.emptyCells.length === 0) {\n      return;\n    }\n\n    const row = this.emptyCells[randomCellIndex].row;\n    const index = this.emptyCells[randomCellIndex].index;\n\n    this.valuesArray[row][index] = this.randomWithProbability();\n  }\n\n  static findEmptyCells() {\n    this.emptyCells = [];\n\n    this.valuesArray.forEach((item, index, array) => {\n      item.forEach((item2, index2, array2) => {\n        if (item2 === 0) {\n          const emptyCell = {\n            row: index,\n            index: index2,\n          };\n\n          this.emptyCells.push(emptyCell);\n        }\n      });\n    });\n  }\n\n  static findFilledCells() {\n    this.filledCells = [];\n\n    this.valuesArray.forEach((item, index, array) => {\n      item.forEach((item2, index2, array2) => {\n        if (item2 !== 0) {\n          const filledCell = {\n            row: index,\n            index: index2,\n          };\n\n          this.filledCells.push(filledCell);\n        }\n      });\n    });\n  }\n\n  static renderGameField(gameField) {\n    this.valuesArray.forEach((item, index, array) => {\n      item.forEach((item2, index2, array2) => {\n        gameField.rows[index].cells[index2].innerText\n        = (item2 === 0) ? '' : `${item2}`;\n        gameField.rows[index].cells[index2].className = '';\n        gameField.rows[index].cells[index2].classList.add('field-cell');\n\n        if (item2 !== 0) {\n          gameField.rows[index].cells[index2].classList\n            .add(`field-cell--${item2}`);\n        };\n      });\n    });\n  }\n\n  static rotateRight90deg(times) {\n    for (let i = 1; i <= times; i++) {\n      this.valuesArray = this.valuesArray[0].map(\n        (val, index) => this.valuesArray.map(row => row[index]).reverse()\n      );\n    }\n  };\n\n  static moveUp() {\n    this.findFilledCells();\n\n    this.filledCells.forEach((fCell) => {\n      this.findEmptyCells();\n\n      const availableCellCoords = this.emptyCells.find(\n        (eCell) => eCell.row < fCell.row && eCell.index === fCell.index\n      );\n\n      if (availableCellCoords) {\n        this.valuesArray[availableCellCoords.row][availableCellCoords.index]\n        = this.valuesArray[fCell.row][fCell.index];\n        this.valuesArray[fCell.row][fCell.index] = 0;\n\n        this.mergeDuplicatedCells(\n          availableCellCoords.row, availableCellCoords.index\n        );\n      } else {\n        this.mergeDuplicatedCells(fCell.row, fCell.index);\n      }\n    });\n    this.insertRandomNumber();\n  }\n\n  static mergeDuplicatedCells(row, cell) {\n    if (row > 0) {\n      if (this.valuesArray[row][cell] === this.valuesArray[row - 1][cell]) {\n        this.valuesArray[row - 1][cell] *= 2;\n        this.valuesArray[row][cell] = 0;\n        this.score += this.valuesArray[row - 1][cell];\n\n        if (this.valuesArray[row - 1][cell] === 2048) {\n          this.showWinMessage = true;\n        }\n      }\n    }\n  }\n\n  static checkAvailableMoves() {\n    for (let i = 0; i <= this.valuesArray.length - 1; i++) {\n      for (let j = 0; j <= this.valuesArray[0].length - 1; j++) {\n        if (this.valuesArray[i + 1] === undefined) {\n          if (this.valuesArray[i][j] === this.valuesArray[i][j + 1]) {\n            return true;\n          }\n        } else {\n          if (this.valuesArray[i][j] === this.valuesArray[i][j + 1]\n            || this.valuesArray[i][j] === this.valuesArray[i + 1][j]\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n}\n\nGame.emptyCells = [];\nGame.filledCells = [];\n\nGame.valuesArray = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nGame.showWinMessage = false;\nGame.score = 0;\n\nbuttonStart.onclick = function() {\n  if (window.innerWidth <= 500) {\n    screenControl.style.display = 'flex';\n  }\n\n  Game.insertRandomNumber();\n  document.querySelector('.message-start').classList.add('hidden');\n  buttonStart.classList.remove('start');\n  buttonStart.classList.add('restart');\n  buttonStart.innerText = 'Restart';\n  Game.renderGameField(field);\n\n  buttonStart.onclick = function() {\n    Game.score = 0;\n    scoreField.innerText = Game.score;\n\n    Game.valuesArray = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    Game.showWinMessage = false;\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n    Game.insertRandomNumber();\n    Game.renderGameField(field);\n  };\n};\n\nconst clickHandler = (buttonName) => {\n  switch (buttonName) {\n    case 'ArrowUp':\n      Game.moveUp();\n      Game.renderGameField(field);\n      break;\n\n    case 'ArrowDown':\n      Game.rotateRight90deg(2);\n      Game.moveUp();\n      Game.rotateRight90deg(2);\n      Game.renderGameField(field);\n      break;\n\n    case 'ArrowLeft':\n      Game.rotateRight90deg(1);\n      Game.moveUp();\n      Game.rotateRight90deg(3);\n      Game.renderGameField(field);\n      break;\n\n    case 'ArrowRight':\n      Game.rotateRight90deg(3);\n      Game.moveUp();\n      Game.rotateRight90deg(1);\n      Game.renderGameField(field);\n      break;\n  }\n  Game.findEmptyCells();\n\n  if (!Game.checkAvailableMoves() && Game.emptyCells.length === 0) {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  };\n\n  if (Game.showWinMessage) {\n    document.querySelector('.message-win').classList.remove('hidden');\n  };\n\n  scoreField.innerText = Game.score;\n};\n\ndocument.addEventListener('keydown', (e) => {\n  if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.code)) {\n    clickHandler(e.code);\n    e.preventDefault();\n  }\n});\n\nscreenControl.addEventListener('click', (e) => {\n  clickHandler(e.target.name);\n  e.preventDefault();\n});\n"]}